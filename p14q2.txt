Methodology
- Measurement of time done with time.perf_counter()
- this was chosen because it will compare intervals of time based on the CPU counter i.e. let me know which algorithm for which value runs better on my machine

Non-recursive function from p12p1.py		Recursive function from p13p6.py
Input		Time							Input		Time
100			1.87							100			2.47			
1,000		2.30							1,000		Recursion error: maximum depth exceeded while calling a Python object	
10,000		5.71							10,000			
100,000		10.82							100,000			

Comments about recursive function:
- Python sets the limit to stack depth at a default of 1000 (sys.getrecursionlimit); I could change this using sys.setrecursion limit, but I'd rather not mess with my computer too much this evening.
- recursion can be intense on memory, so it would make more sense to use a specific approach (e.g. LRU algorithms) and the speed of the recusrive method would be much better

Comments about Non-recursive function:
- for a lark, I tried 1,000,000 and stopped it out of boredom (and not wanting it running in the background while doing other things)
- my computer would continue doing this iterative calculation until it reached a result or a stack overflow occurred; with enough time and patience I could calculate what input would do that for this program, but that's a lot of work for little payoff; back of hand calculation would be to figure out the maximum stack bound and figure out what figure would take up that much memory, and then figure out what input would generate such a nubmer (I am, of course, ignoring the interaction effects of the OS and other applications, but we aren't building a super computer for a critical purpose right now)